---
name: Update Golang version
run-name: ${{ github.actor }} has started Golang version update
on:
  workflow_run:
    types:
      - completed
    workflows:
      - "ci"
  
  create:

jobs:
  Update-Golang-version-make-PR:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/heads/update/go_') && github.event_name == 'create' }}
    outputs:
      new-go-version: ${{ steps.get-version-number.outputs.new-go-version }}
      new-go-major-version: ${{ steps.get-version-number.outputs.new-go-major-version }}
    steps:
      - run: echo "github.ref = ${{ github.ref }}"
      - name: Print GitHub event action info
        run: |
            echo "github.event.action: ${{ github.event.action }}"
            echo "github.event_name: ${{ github.event_name }}"
            echo "github.action: ${{ github.action }}"
      - name: Get version number
        id: get-version-number
        run: |
            NEW_GO_VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/update\/go_\(.*\)$/\1/g')
            NEW_GO_MAJOR_VERSION=$(echo $NEW_GO_VERSION | sed 's/\([0-9]*\)\.\([0-9]*\).*$/\1.\2/g')
            echo "New go version $NEW_GO_VERSION"
            echo "New go major version $NEW_GO_MAJOR_VERSION"
            echo "new-go-version=${NEW_GO_VERSION}" >> "$GITHUB_OUTPUT"
            echo "new-go-major-version=${NEW_GO_MAJOR_VERSION}" >> "$GITHUB_OUTPUT"
      - name: Check out code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.NSM_BOT_GITHUB_TOKEN }}
      - name: Update Go version in code to ${{ steps.get-version-number.outputs.new-go-version }}
        run: |
          find . -name '*.yaml' -exec sed -i -e 's/ go-version\: [1-9][0-9\.]*[0-9]$/ go-version\: ${{ steps.get-version-number.outputs.new-go-version }}/g' {} \;
      - name: Create & push commit
        run: |
          git config --global user.email "nsmbot@networkservicmesh.io"
          git config --global user.name "NSMBot"
          git commit -s -a -m "Update Go version to ${{ steps.get-version-number.outputs.new-go-version }}"
          git push
      # TODO: Use .github/workflows/pr-for-updates.yaml for creating PR
      - name: Construct PR message
        run: |
            PULL_REQUEST_BODY="Update Go version to ${{ steps.get-version-number.outputs.new-go-version }}"
            echo "$PULL_REQUEST_BODY"
            echo "PULL_REQUEST_BODY<<EOF" >> $GITHUB_ENV
            echo "$PULL_REQUEST_BODY" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
      - name: pull-request-action
        uses: vsoch/pull-request-action@1.0.24
        env:
          GITHUB_TOKEN: ${{ secrets.NSM_BOT_GITHUB_TOKEN  }}
          BRANCH_PREFIX: "update/"
          PULL_REQUEST_BRANCH: "main"

  Update-Golang-version-check-PR-info:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_run' }}
    steps:
      - name: Print GitHub event info
        run: |
            echo "github.ref = ${{ github.ref }}"
            echo "github.base_ref: ${{ github.base_ref }}"
            echo "github.head_ref: ${{ github.head_ref }}"
            echo "github.ref_name: ${{ github.ref_name }}"
            echo "github.sha: ${{ github.sha }}"
            echo "github.event.action: ${{ github.event.action }}"
            echo "github.event_name: ${{ github.event_name }}"
            echo "github.action: ${{ github.action }}"
            echo "github.event.ref: ${{ github.event.ref }}"
            echo "github.event.workflow_run.conclusion: ${{ github.event.workflow_run.conclusion }}"
            echo "github.event.workflow_run.event: ${{ github.event.workflow_run.event }}"
            echo "github.event.workflow_run.head_branch: ${{ github.event.workflow_run.head_branch }}"
            echo "github.event.workflow_run.head_commit: ${{ github.event.workflow_run.head_commit }}"
            echo "github.event.workflow_run.head_sha: ${{ github.event.workflow_run.head_sha }}"

  # Update-Golang-version-check-PR-mergeability:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     pr_branch_ref: ${{ steps.check_mergeability.outputs.pr_branch_ref }}
  #   steps:
  #     - name: Get PR Info
  #       id: get_pull_request_info
  #       uses: octokit/request-action@v2.x
  #       with:
  #         route: GET /repos/${{ github.repository }}/pulls/${{ steps.findPr.outputs.pr }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.token }}
  #     - name: Check mergeability
  #       id: check_mergeability
  #       run: |
  #         echo "Mergeable: ${{ fromJson(steps.get_pull_request_info.outputs.data).mergeable }}"
  #         PR_BRANCH_REF=${{ fromJson(steps.get_pull_request_info.outputs.data).head.ref }}
  #         echo "PR_BRANCH_REF: $PR_BRANCH_REF"
  #         echo "pr_branch_ref=$PR_BRANCH_REF" >> $GITHUB_OUTPUT
  #         if [ "${{ fromJson(steps.get_pull_request_info.outputs.data).mergeable }}" != "true" ]; then
  #           echo "PR has conflicts"
  #           exit 1
  #         fi
